name: CI

permissions:
  pull-requests: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  job_setup:
    name: Setup
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      pull-requests: read
    steps:
      - name: Checkout current commit
        uses: actions/checkout@v4

      - name: Output GitHub context
        run: echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Set up Snyk
        uses: snyk/actions/setup@master

  job_lint-and-security:
    runs-on: ubuntu-latest
    needs: [job_setup]
    name: Lint
    environment:
      name: test
    outputs:
      message: ${{ steps.snyk.outputs.message }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: "18.12.1"
      - name: Lint with Ruff
        id: ruff
        uses: chartboost/ruff-action@v1
        with:
          src: "./src"
      - name: Check for security vulnerabilities
        id: snyk

        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          result=$(snyk test --severity-threshold=critical | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g")
          echo $result
          echo "message=${result//$'\n'/\<br />}" >> "$GITHUB_OUTPUT"

      - name: comment results
        uses: thollander/actions-comment-pull-request@v2.5.0
        if: github.event_name == 'pull_request'
        with:
          GITHUB_TOKEN: ${{ github.token }}
          message: |
            # Pipeline Results
            ## Linting
            ${{ steps.ruff.conclusion }}
            ## Security
            ${{ steps.snyk.outputs.message }}

  job_unit-tests:
    runs-on: ubuntu-latest
    needs: [job_setup]
    environment:
      name: test
    strategy:
      matrix:
        node: ["18.12.1", "20.11.1"]
    name: Unit tests (Node ${{ matrix.node }})
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ matrix.node }}

      - run: yarn test:unit

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests

  job_database-tests:
    runs-on: ubuntu-latest
    needs: [job_setup]
    environment:
      name: test
    strategy:
      matrix:
        node: ["18.12.1", "20.11.1"]
        env:
          - DB: mysql8
            NODE_ENV: testing-mysql
        include:
          - node: 18.12.1
            env:
              DB: sqlite3
              NODE_ENV: testing
    env:
      DB: ${{ matrix.env.DB }}
      NODE_ENV: ${{ matrix.env.NODE_ENV }}
    name: Database tests (Node ${{ matrix.node }}, ${{ matrix.env.DB }})
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ matrix.node }}

      - name: Shutdown MySQL
        run: sudo service mysql stop
        if: matrix.env.DB == 'mysql8'

      - uses: daniellockyer/mysql-action@main
        if: matrix.env.DB == 'mysql8'
        with:
          authentication plugin: "caching_sha2_password"
          mysql version: "8.0"
          mysql database: "ghost_testing"
          mysql root password: "root"

      - name: Record start time
        run: date +%s > ${{ runner.temp }}/startTime # Get start time for test suite

      - name: Set env vars (SQLite)
        if: contains(matrix.env.DB, 'sqlite')
        run: echo "database__connection__filename=/dev/shm/ghost-test.db" >> $GITHUB_ENV

      - name: Set env vars (MySQL)
        if: contains(matrix.env.DB, 'mysql')
        run: echo "database__connection__password=root" >> $GITHUB_ENV

      - name: Record test duration
        run: |
          startTime="$(cat ${{ runner.temp }}/startTime)"
          endTime="$(date +%s)"
          echo "test_time=$(($endTime-$startTime))" >> $GITHUB_ENV

  job_coverage:
    name: Coverage
    needs: [job_database-tests, job_unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

  job_sonar-scan:
    name: SonarCloud Scan
    environment:
      name: test
    needs: [job_database-tests, job_unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: scan
        id: sonarcloud
        uses: sonarsource/sonarcloud-github-action@v3.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  job_deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [job_unit-tests, job_database-tests, job_sonar-scan]
    environment:
      name: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to Dockerhub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ghost-blog:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/ghost-blog:latest
